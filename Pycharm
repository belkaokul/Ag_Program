
import sys
import subprocess
import time
import psutil
import pyqtgraph as pg
import csv
from PyQt5.QtWidgets import QApplication, QMainWindow, QLabel, QVBoxLayout, QWidget
from PyQt5.QtCore import QTimer

class NetworkMonitor(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Ağ Monitörü")

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.layout = QVBoxLayout()
        self.central_widget.setLayout(self.layout)

        self.label_total_upload = QLabel("Total Yükleme: Hesaplanıyor...")
        self.layout.addWidget(self.label_total_upload)

        self.label_total_download = QLabel("Total İndirme: Hesaplanıyor...")
        self.layout.addWidget(self.label_total_download)

        self.label_upload = QLabel("Yükleme: Hesaplanıyor...")
        self.layout.addWidget(self.label_upload)

        self.label_download = QLabel("İndirme: Hesaplanıyor...")
        self.layout.addWidget(self.label_download)

        self.label_ip_address = QLabel("IP Adresi: Hesaplanıyor...")
        self.layout.addWidget(self.label_ip_address)

        self.plot_widget = pg.PlotWidget()
        self.plot_widget.setTitle("Ağ Kullanımı")
        self.plot_widget.setLabel('left', 'Veri (MB)')
        self.plot_widget.setLabel('bottom', 'Zaman (s)')
        self.layout.addWidget(self.plot_widget)

        self.plot_widget.setBackground('#b5cdd1')  # Arka plan rengini hafif buz grisi yap

        self.last_upload = 0
        self.last_download = 0
        self.upload_speed = 0
        self.down_speed = 0
        self.start_time = time.time()
        self.x_data = []
        self.upload_data = []
        self.download_data = []

        self.total_uploads = []
        self.total_downloads = []

        self.device_data = {}  # Cihazların veri kullanımı

        self.timer = QTimer()
        self.timer.timeout.connect(self.update)
        self.timer.start(1000)  # Her 1 saniye

    def save_data(self):
        with open('network_data.csv', 'w', newline='') as file:
            writer = csv.writer(file)
            writer.writerow(['Geçen Süre', 'Toplam Yükleme (Bytes)', 'Toplam İndirme (Bytes)', 'Bağlı Cihazlar', 'Cihaz Veri Kullanımı'])
            connected_devices = ", ".join(self.device_data.keys())
            device_data_str = "; ".join([f"{ip}: {data}" for ip, data in self.device_data.items()])
            writer.writerow([time.time() - self.start_time, self.last_upload, self.last_download, connected_devices, device_data_str])

    def size(self, B):
        KB = 1024
        MB = KB ** 2
        if B < KB:
            return f"{B} Bytes"
        elif KB <= B < MB:
            return f"{B/KB:.2f} KB"
        else:
            return f"{B/MB:.2f} MB"

    def get_ip_address(self):
        result = subprocess.run(["ipconfig", "getifaddr", "en0"], capture_output=True, text=True)
        if result.returncode == 0:
            return result.stdout.strip()
        else:
            return "IP Adresi alınamadı"

    def get_connected_devices(self):
        result = subprocess.run(["arp", "-a"], capture_output=True, text=True)
        if result.returncode == 0:
            devices = []
            lines = result.stdout.split('\n')
            for line in lines:
                if line:
                    parts = line.split()
                    if len(parts) > 1:
                        ip_address = parts[1].strip('()')
                        devices.append(ip_address)
                        if ip_address not in self.device_data:
                            self.device_data[ip_address] = {'upload': 0, 'download': 0}
            return devices
        else:
            return ["Ağa bağlı cihazlar alınamadı"]

    def update(self):
        counter = psutil.net_io_counters()
        upload = counter.bytes_sent
        download = counter.bytes_recv

        self.total_uploads.append(upload)
        self.total_downloads.append(download)

        if self.last_upload > 0:
            self.upload_speed = upload - self.last_upload if upload >= self.last_upload else 0

        if self.last_download > 0:
            self.down_speed = download - self.last_download if download >= self.last_download else 0

        self.last_upload = upload
        self.last_download = download

        self.label_total_upload.setText(f"Total Yükleme: {self.size(upload)} ({upload} Bytes)")
        self.label_total_download.setText(f"Total İndirme: {self.size(download)} ({download} Bytes)")
        self.label_upload.setText(f"Yükleme: {self.size(self.upload_speed)}")
        self.label_download.setText(f"İndirme: {self.size(self.down_speed)}")

        elapsed_time = time.time() - self.start_time
        self.x_data.append(elapsed_time)
        self.upload_data.append(self.upload_speed / (1024 * 1024))
        self.download_data.append(self.down_speed / (1024 * 1024))

        self.plot_widget.plot(self.x_data, self.upload_data, pen='k', name='Yükleme')
        self.plot_widget.plot(self.x_data, self.download_data, pen='r', name='İndirme')

        ip_address = self.get_ip_address()
        self.label_ip_address.setText(f"IP Adresi: {ip_address}")

        connected_devices = self.get_connected_devices()  # Bağlı cihazları güncelleyin

        # Cihazların veri kullanımını güncelle
        for device in connected_devices:
            self.device_data[device]['upload'] += self.upload_speed // len(connected_devices)
            self.device_data[device]['download'] += self.down_speed // len(connected_devices)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    monitor = NetworkMonitor()
    monitor.show()
    app.aboutToQuit.connect(monitor.save_data)
    sys.exit(app.exec_())
